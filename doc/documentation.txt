CLIC (Command Line Interface Calculator)

CLIC is a command line program intended to have all the functionality of a scientific calculator.

How it's made:

Tokens:

Tokens are how the computer identifies the fundamental elements of an expression. For example, given the expression "1 + 2 * 3" we can see that we are working with 3 integers and two operators. Each token is distiguished by enumerated types such as TT_INT, where TT stands for "Token Type."

Lexer:

After the user types an expression and presses enter, the input string is translated into tokens via the lexer. Each element in the string should be either a number, a mathematical operator, or a variable name. After the lexer reaches the end of the line, a vector of tokens is produced.

Parser and Interpreter:

Our calculator could simply go through each token from left to right, but that would not obey standard order of operations. For example, in the case of "1 + 2 * 3" 1 + 2 would give us 3 multiplied by 3 giving us 9, which is the wrong answer! We must tell the computer to do multiplication before addition. To do this, we arrange the tokens into a data structure called a tree with the addition token serving as the root node of our tree in this case. Because this is a binary tree, each node can have only one parent, and no more than two children. According to our grammar definition, 2 numbers multiplied is called a term. When the parser sees the multiplication symbol, it knows to add the product of 2 and 3 to the factor 1. As the interpreter traverses the tree, operator nodes are converted to number nodes representing the solution to each term, factor, or expression. The root node will resolve to the correct answer.

This type of data structure, known as an abstract-syntax tree, is widely used in computer science from web servers to computer languages.

Integers and Floating points:

In the future we want to make something that can solve expressions with any size number. Currently numbers over 2^31 can only be added, because multiplication with large numbers is a complicated subject. 

Similarly, floating point arithmatic has many nuanced details. We were not able to resolve rounding errors or have greater than 16 decimal places of precision.

Strings are only limited by the amount of memory a computer has, and so we chose to store the value of each number as a string. This way we can store a representation of any arbitrarily large number. Doing arithmatic with these numbers is another story.



Abstract Syntax Tree:

CLIC allows for complex expressions that follow order of operations as seen in scientific calculators.